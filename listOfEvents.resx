<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox_Back.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>